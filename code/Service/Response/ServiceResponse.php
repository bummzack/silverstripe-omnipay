<?php

namespace SilverStripe\Omnipay\Service\Response;

use Omnipay\Common\Message\AbstractResponse;
use SilverStripe\Omnipay\Exception\ServiceException;

/**
 * Class ServiceResponse.
 *
 * A response generated by a service.
 * In the most common case, this will be a simple wrapper around a response from the Omnipay Gateway.
 *
 * @package SilverStripe\Omnipay\Service\Response
 */
abstract class ServiceResponse
{
    /**
     * @var \Omnipay\Common\Message\ResponseInterface
     */
    protected $omnipayResponse;

    /**
     * @var string
     */
    protected $redirectUrl;

    /**
     * @var \Payment
     */
    protected $payment;

    /**
     * @var String Success message which can be exposed to the user
     * if the payment was successful. Not persisted in database, so can't
     * be used for offsite payment processing.
     */
    protected $message;

    /**
     * ServiceResponse constructor.
     * @param \Payment $payment the payment instance
     * @param AbstractResponse|null $response a response from the Omnipay gateway
     */
    public function __construct(\Payment $payment, AbstractResponse $response)
    {
        $this->payment = $payment;
        $this->omnipayResponse = $response;
    }

    /**
     * Whether or not the call to the service was successful.
     *
     * @return boolean
     */
    public function isSuccessful()
    {
        return true;
    }

    public function getRedirectUrl()
    {
        return $this->redirectUrl;
    }

    public function setRedirectUrl($value)
    {
        $this->redirectUrl = $value;
        return $this;
    }

    /**
     * Get the response given by the omnipay gateway
     * @return \Omnipay\Common\Message\AbstractResponse|null
     */
    public function getOmnipayResponse()
    {
        return $this->omnipayResponse;
    }

    /**
     * See {@link $message}.
     *
     * @param String $message
     * @return $this
     */
    public function setMessage($message)
    {
        $this->message = $message;

        return $this;
    }

    /**
     * @return String
     */
    public function getMessage()
    {
        return $this->message;
    }

    /**
     * @return \Payment
     */
    public function getPayment()
    {
        return $this->payment;
    }

    /**
     * Return the HTTP response given by this gateway.
     * This could be a redirect, but might also be a response with content.
     * @throws ServiceException when there's an issue when creating an HTTP response
     * @return \SS_HTTPResponse
     */
    abstract function getHTTPResponse();
}
