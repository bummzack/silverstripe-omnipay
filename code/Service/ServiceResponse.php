<?php

namespace SilverStripe\Omnipay\Service;

use Omnipay\Common\Message\AbstractResponse;

/**
 * Class ServiceResponse.
 *
 * A response generated by a service. This response holds several answer-related properties, such as
 * an HTTP Response, the response from the Omnipay gateway and several flags that give information about the
 * nature of this response
 *
 * This should be used more of container that gives access to several parts that need to be transmitted
 * from the service to the application.
 *
 * Do not implement application logic into service responses.
 *
 * @package SilverStripe\Omnipay\Service\Response
 */
class ServiceResponse
{
    /**
     * Flag to mark this response as an error
     */
    const SERVICE_ERROR = 1;

    /**
     * Flag to mark this response as pending (eg. waiting for an asynchronous response)
     */
    const SERVICE_PENDING = 2;

    /**
     * Flag to mark this response as a redirect to an offsite gateway
     */
    const SERVICE_REDIRECT = 4;

    /**
     * Flag to mark this response as a notification response (eg. HTTP response will be returned to the payment gateway)
     */
    const SERVICE_NOTIFICATION = 8;

    /**
     * @var \Omnipay\Common\Message\ResponseInterface
     */
    protected $omnipayResponse;

    /**
     * @var int
     */
    protected $flags = 0;

    /**
     * @var bool
     */
    protected $isAwaitingNotification = false;

    /**
     * @var \Payment
     */
    protected $payment;

    /**
     * @var \SS_HTTPResponse
     */
    protected $httpResponse;


    /**
     * ServiceResponse constructor.
     * Additional arguments will be treated as state flags
     * @param \Payment $payment the payment instance
     */
    public function __construct(\Payment $payment)
    {
        $this->payment = $payment;
        for($i = 1, $len = func_num_args(); $i < $len; $i++){
            $this->addFlag(func_get_arg($i));
        }
    }

    /**
     * Whether or not this response is an error-response.
     * Attention: This doesn't necessarily correlate with the Omnipay response being successful or notâ€¦
     * A redirect is not successful in terms of completing a payment (response from omnipay isn't successful), yet the
     * service completed successfully and shouldn't report an error here!
     *
     * @return boolean
     */
    public function isError()
    {
        return $this->flags & self::SERVICE_ERROR;
    }

    /**
     * @return \Payment
     */
    public function getPayment()
    {
        return $this->payment;
    }

    /**
     * Whether or not the request is pending and waiting for an async notification
     * @return bool
     */
    public function isAwaitingNotification()
    {
        return ($this->flags & self::SERVICE_PENDING) > 0;
    }

    /**
     * Whether or not this is a response to a notification
     * @return bool
     */
    public function isNotification()
    {
        return ($this->flags & self::SERVICE_NOTIFICATION) > 0;
    }

    /**
     * Whether or not this is an offsite redirect
     * @return bool
     */
    public function isRedirect()
    {
        return ($this->flags & self::SERVICE_REDIRECT) > 0;
    }

    /**
     * Add a flag for this response.
     * Example: `$r->addFlag(ServiceResponse::SERVICE_REDIRECT)`
     *
     * @param int $value
     * @throws \InvalidArgumentException if the parameter is not of type int
     * @return $this
     */
    public function addFlag($value)
    {
        if(!is_int($value)){
            throw new \InvalidArgumentException('Flag must be of type int');
        }
        $this->flags |= $value;
        return $this;
    }

    /**
     * Remove a flag from this response.
     * Example: `$r->removeFlag(ServiceResponse::SERVICE_REDIRECT)`
     *
     * @param int $value
     * @throws \InvalidArgumentException if the parameter is not of type int
     * @return $this
     */
    public function removeFlag($value)
    {
        if(!is_int($value)){
            throw new \InvalidArgumentException('Flag must be of type int');
        }
        $this->flags &= ~$value;
        return $this;
    }

    /**
     * Get the response given by the omnipay gateway
     * @return \Omnipay\Common\Message\AbstractResponse|null
     */
    public function getOmnipayResponse()
    {
        return $this->omnipayResponse;
    }

    /**
     * Set the response from Omnipay
     * @param AbstractResponse $response the response from the omnipay gateway
     * @return $this
     */
    public function setOmnipayResponse(AbstractResponse $response)
    {
        $this->omnipayResponse = $response;
        return $this;
    }

    /**
     * Return the HTTP response given by this gateway.
     * This could be a redirect, but might also be a response with content.
     * @return \SS_HTTPResponse
     */
    public function getHttpPResponse()
    {
        return $this->httpResponse;
    }

    /**
     * Set the HTTP response
     * @param \SS_HTTPResponse $response the HTTP response. Can be used to return directly from a payment request
     * @return $this
     */
    public function setHttpResponse(\SS_HTTPResponse $response)
    {
        $this->httpResponse = $response;
        return $this;
    }
}
